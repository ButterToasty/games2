attribute vec3 aVertexPosition;
attribute vec2 aVertexTexCoord;

uniform mat4 uVPMatrix;
uniform mat3 uNMatrix;
uniform vec4 uTextureRect; //startX, startY, width, height

uniform mediump vec3 uLightPos;
uniform mediump vec3 uLightColor;
uniform vec3 uFillPos;
uniform mediump vec3 uFillColor;

uniform vec2 uRotationSinCos;
uniform vec3 uModelPos;

varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;
varying vec4 vScreenPos;

uniform mat4 uShadowMVPMatrix;
varying vec3 vShadowPos;

void main(void) {
	
	float scale = sqrt( dot(uRotationSinCos, uRotationSinCos));//BEST TRICK EVER?
	
	vec3 vertpos = aVertexPosition;
	vertpos = vec3( vertpos.x * uRotationSinCos.y - vertpos.y * uRotationSinCos.x, vertpos.x * uRotationSinCos.x + vertpos.y * uRotationSinCos.y , vertpos.z * scale );
	vec4 mPos =  vec4(uModelPos + vertpos,1.);
	gl_Position = uVPMatrix * mPos;
	
	vec3 vertNorm = vec3(0.,1.,0.);
	
	vec3 transformedNormal = normalize(uNMatrix * vertNorm);

	vDiffuse = uLightColor * (0.75 + 0.25 * aVertexPosition.z); //darken the bottoms by a bit for sunlight
	vFill = uFillColor ;
	
	texCoord = vec2(uTextureRect.x + (aVertexTexCoord.x)*uTextureRect[2], uTextureRect.y + (aVertexTexCoord.y)*uTextureRect[3]);
	vModelPos = mPos.xyz;
	vScreenPos = uVPMatrix * mPos;
	vec4 shadowClipPos = uShadowMVPMatrix * mPos;
	vShadowPos =  vec3( shadowClipPos.xyz / shadowClipPos.w)*0.5+0.5;
}