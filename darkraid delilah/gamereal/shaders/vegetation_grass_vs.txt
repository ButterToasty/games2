precision mediump float;

attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aVertexTexCoord;
attribute vec3 aVertexColor;

uniform mat4 uVPMatrix;
uniform mat3 uNMatrix;

uniform vec3 uLightPos;
uniform vec3 uLightColor;
uniform vec3 uFillPos;
uniform vec3 uFillColor;
uniform vec3 uAmbientColor;
uniform vec2 uFillFactor;
uniform vec2 uRotationSinCos;
uniform vec3 uModelPos;

uniform vec3 uWindOffset;

varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;

uniform mat4 uShadowMVPMatrix;
varying vec3 vShadowPos;

void main(void) {
	float scale = sqrt( dot(uRotationSinCos, uRotationSinCos));//BEST TRICK EVER?

	float detailEffect = (aVertexColor.g/255.);
	float windEffect = (aVertexColor.r/255.);
	
	float uniqueDetailOffset = uModelPos.x+uModelPos.y; 
	float detailWind = 0.1*sin(uWindOffset.b + aVertexColor.b/255. * 6.283     + uniqueDetailOffset )*detailEffect;
	vec3 localPos = vec3( aVertexPosition.x * uRotationSinCos.y - aVertexPosition.y * uRotationSinCos.x, aVertexPosition.x * uRotationSinCos.x + aVertexPosition.y * uRotationSinCos.y , aVertexPosition.z * scale  );
	vec3 mPos = uModelPos + localPos + detailWind*aVertexNormal + vec3(uWindOffset.r, uWindOffset.g, 0.)*windEffect;
	
	vec3 vertNorm = vec3( aVertexNormal.x * uRotationSinCos.y - aVertexNormal.y * uRotationSinCos.x, aVertexNormal.x * uRotationSinCos.x + aVertexNormal.y * uRotationSinCos.y , aVertexNormal.z );
	vec3 transformedNormal = normalize(uNMatrix * vertNorm);
	
	gl_Position = uVPMatrix * vec4(mPos , 1.0);
	vDiffuse = min ( max( abs( dot(transformedNormal, normalize(uLightPos)) ), 0.2) +0.2, 1.) *uLightColor;
	MACRO_VFILL
	float fillHeightFactor = clamp(localPos.z*1.5	+0.15 , 0., 1.);
	vFill = vFill*fillHeightFactor*uFillFactor.x+  uFillColor*(0.5+fillHeightFactor)*uFillFactor.y;
	vFill -= clamp((0.4-aVertexColor.g/256.), 0.,1.)*uAmbientColor; //add ambient occlusion to root
	texCoord = aVertexTexCoord;
	vModelPos = mPos;
	
	vec4 shadowClipPos = uShadowMVPMatrix * vec4(mPos,1.);
	vShadowPos =  vec3( shadowClipPos.xyz / shadowClipPos.w)*0.5+0.5;
}