precision mediump float;

uniform sampler2D uSampler;
uniform sampler2D uFowSampler;
uniform vec3 uFowPos;
uniform vec3 uFogColor;
uniform vec4 uZFogColor;
uniform vec4 uFogSize;
uniform vec3 uAmbientColor;
uniform vec3 uLocalLightColor;
uniform mediump vec3 uLightColor;
uniform float uAlphaTreshold;
uniform float uCutoffZ;
uniform vec2 uScreenPixelSize;
varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;

uniform float uTransparency;

uniform sampler2D uReflectionSampler;

uniform sampler2D uShadowSampler;
varying vec3 vShadowPos;
const float shadowBias = 0.01;
const float pcf = 0.0012;
const float reflection_hdr = MACRO_REFLECTION_HDR;

void main(void){
	vec4 tex = texture2D(uSampler,texCoord);
	if(tex.a < uAlphaTreshold || vModelPos.z > uCutoffZ){
		discard;
	}
	tex.a = min(1. ,(tex.a-uAlphaTreshold)*2. + uAlphaTreshold) * 0.8 * uTransparency;
	
	MACRO_fowTex
	MACRO_SHADOW_DETAILED
	shadow = shadow * fowTex.g; //cloud shadows
	
	vec2 screenPos = gl_FragCoord.xy/uScreenPixelSize; screenPos.y=1.-screenPos.y;
	vec3 reflSample = texture2D(uReflectionSampler, screenPos).rgb * reflection_hdr;
	vec3 local = fowTex.b * uLocalLightColor;
	
	MACRO_HORIZONTAL_FOG
	vec3 color = mix(tex.rgb*((vDiffuse)*shadow + (uAmbientColor + vFill)*MACRO_AO  + local),reflSample,0.5);
	MACRO_DISTANCE_FOG
	MACRO_FragColor_BLENDED
}