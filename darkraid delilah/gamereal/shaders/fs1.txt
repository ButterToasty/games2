precision mediump float;

uniform sampler2D uSampler;

uniform sampler2D uFowSampler;
uniform vec3 uFowPos;

uniform vec3 uFogColor;
uniform vec4 uZFogColor;
uniform vec4 uFogSize;

uniform vec3 uAmbientColor;
uniform vec3 uLocalLightColor;
uniform vec3 uGroundColor;
uniform vec3 uSkyColor;
uniform vec4 uCloudColor;
uniform mediump vec3 uLightColor;
uniform mediump vec3 uLightPos;

uniform float uCutoffZ;
uniform vec3 uEyePos;

varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;
varying vec3 vNorm;
varying vec2 vFresnel;

uniform sampler2D uShadowSampler;
varying vec3 vShadowPos;
const float shadowBias = 0.00;
const float pcf = 0.0012;

void main(void){
	vec4 tex = texture2D(uSampler,texCoord);
	if(tex.a < 0.5 || vModelPos.z > uCutoffZ){
		discard;
	}
	
	float  reflectivity = (tex.a-0.5)*2.;//transformed from 0.5--1.0 to 0.0--1.0
	vec3 norm = normalize(vNorm);
	vec3 reflEyeDir = normalize(reflect(-(uEyePos-vModelPos), norm));
	vec3 reflPos = vModelPos + reflEyeDir*5./sqrt(max(0.1,reflEyeDir.z));
	vec2 reflFowCoord= vec2(0.5, 0.5) + (reflPos.xy - uFowPos.xy) * uFowPos.z;
	vec4 reflFowTex = texture2D(uFowSampler, reflFowCoord);
	float reflCloud= clamp(reflFowTex.g*2.-0.6, 0., 1.);

	MACRO_fowTex
	MACRO_SHADOW_DETAILED
	shadow = shadow * fowTex.g; //cloud shadows

	//local light direction hack using gradient
	/*vec2 f2coord = vec2(0.5, 0.5) + (vModelPos.xy+vec2(-0.2,0.) - uFowPos.xy) * uFowPos.z;
	vec4 f2= texture2D(uFowSampler, f2coord);
	vec2 f3coord = vec2(0.5, 0.5) + (vModelPos.xy+vec2(0.0,-0.2) - uFowPos.xy) * uFowPos.z;
	vec4 f3= texture2D(uFowSampler, f3coord);
	vec3 lightDir = normalize( vec3(fowTex.b-f2.b, fowTex.b-f3.b, 0.));
	lightDir.z = 0.3;*/
	
	vec3 eyeDir = normalize(uEyePos-vModelPos);
	vec3 reflDir = reflect(-(uLightPos), norm);
	float specStrength = 5.*reflectivity*reflectivity;
	float spec = specStrength*0.3 *  pow(max(dot( reflDir, eyeDir), 0.0), 0.95*specStrength+1.5 );
	
	MACRO_LOCAL_LIGHT
	MACRO_LOCAL_REFLECTION
	MACRO_HORIZONTAL_FOG
	
	vec3 color = tex.rgb*((vDiffuse)*shadow + (uAmbientColor + vFill)*MACRO_AO  + local);
	
	float fresnelPower =  (pow(1.-dot(eyeDir, norm), 1.4)* 0.95 + 0.25);
	float reflGradient = clamp(norm.z * 3. +0.1, 0.,1.);

	vec3 reflColor = max(color, mix(uGroundColor*fowTex.g, mix( uCloudColor.rgb,uSkyColor,reflCloud*uCloudColor.a), reflGradient) + reflLocal );
	color = mix(color, reflColor, fresnelPower * reflectivity);
	color = color + uLightColor*spec*shadow;
	
	if(tex.a >= 0.9 && tex.b+tex.r+tex.g >= 2.5){
		color += tex.rgb*1.5;
	}
	
	MACRO_DISTANCE_FOG
	MACRO_FragColor_OPAQUE
}