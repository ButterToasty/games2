precision mediump float;

uniform sampler2D uSampler;

uniform sampler2D uFowSampler;
uniform float uShadowPerturb;
uniform vec3 uFowPos;

uniform vec3 uFogColor;
uniform vec4 uZFogColor;
uniform vec4 uFogSize;

uniform vec3 uAmbientColor;
uniform vec3 uLocalLightColor;
uniform mediump vec3 uLightColor;
uniform float uAlphaTreshold;

uniform float uCutoffZ;

varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;

uniform sampler2D uShadowSampler;
varying vec3 vShadowPos;
varying float vShadowFactor;
const float shadowBias = 0.01;
const float pcf = 0.0012;
//const float minShadow = 0.3;

void main(void){
	vec4 tex = texture2D(uSampler,texCoord);
	if(tex.a < uAlphaTreshold || vModelPos.z > uCutoffZ){
		discard;
	}
	vec4 shadowfrag = texture2D( uShadowSampler , vShadowPos.xy + vec2(pcf, pcf));
	vec4 shadowfrag4 = texture2D( uShadowSampler , vShadowPos.xy + vec2(-pcf,-pcf));
	float shadow = (
	step(vShadowPos.z-shadowBias, shadowfrag.a + shadowfrag.b*0.00390625)  + 
	step(vShadowPos.z-shadowBias, shadowfrag4.a + shadowfrag4.b*0.00390625))*0.5;
	shadow = max(vShadowFactor, shadow);
	
	MACRO_fowTex
	shadow = shadow*fowTex.g; //cloud shadows
	vec3 local = fowTex.b * uLocalLightColor;

	MACRO_HORIZONTAL_FOG
	vec3 color = tex.rgb*((vDiffuse)*shadow + (uAmbientColor + vFill)*MACRO_AO  + local);
	
	MACRO_DISTANCE_FOG
	
	MACRO_FragColor_OPAQUE

}