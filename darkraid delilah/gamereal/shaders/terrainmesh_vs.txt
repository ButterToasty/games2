precision mediump float;

attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aVertexTexCoord;

uniform mat4 uVPMatrix;
uniform mat4 uShadowMVPMatrix;
uniform mat3 uNMatrix;
uniform vec3 uModelPos;
uniform vec2 uRotationSinCos;

uniform highp vec3 uLightPos;
uniform mediump vec3 uLightColor;

uniform highp vec3 uFillPos;
uniform highp vec3 uFillColor;
uniform vec2 uTerrainTexCoordMultiplier;
uniform vec2 uTerrainTexCoordOffset;

varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;
varying vec3 vShadowPos;
varying vec2 vBlendTexCoord;


void main(void) {
	float scale = sqrt( dot(uRotationSinCos, uRotationSinCos));//BEST TRICK EVER?

	vec3 vertpos = aVertexPosition;
	vertpos = vec3( vertpos.x * uRotationSinCos.y - vertpos.y * uRotationSinCos.x, vertpos.x * uRotationSinCos.x + vertpos.y * uRotationSinCos.y , vertpos.z * scale);
	vec4 mPos =  vec4(uModelPos + vertpos,1.);
	gl_Position = uVPMatrix * mPos;
	
	vec4 shadowClipPos = uShadowMVPMatrix * mPos;
	vShadowPos = shadowClipPos.xyz/shadowClipPos.w * 0.5 + 0.5;
	
	vec3 tNorm = aVertexNormal;
	tNorm = normalize(vec3( tNorm.x * uRotationSinCos.y - tNorm.y * uRotationSinCos.x, tNorm.x * uRotationSinCos.x + tNorm.y * uRotationSinCos.y , tNorm.z ));
	
	vec3 transformedNormal = tNorm ;
	MACRO_VFILL
	vDiffuse =  max(dot(tNorm, normalize(uLightPos)), 0.0) *uLightColor;
	
	vModelPos = mPos.xyz;
	texCoord = aVertexTexCoord;
	vBlendTexCoord = ((mPos.xy + uTerrainTexCoordOffset)/ 8.  )*uTerrainTexCoordMultiplier;
}