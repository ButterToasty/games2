attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aVertexTexCoord;
attribute vec3 aVertexPositionNext;
attribute vec3 aVertexNormalNext;

uniform mat4 uVPMatrix;
uniform mat4 uVMatrix;
uniform mat3 uNMatrix;

uniform mediump vec3 uLightPos;
uniform mediump vec3 uLightColor;
uniform vec3 uFillPos;
uniform mediump vec3 uFillColor;

uniform vec2 uRotationSinCos;
uniform vec3 uModelPos;
uniform float uAnimInterp;

varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;

varying vec3 vNorm;
varying vec3 vTransformedNorm;
varying vec4 vScreenPos;

uniform mat4 uShadowMVPMatrix;
varying vec3 vShadowPos;

void main(void) {
	
	float scale = sqrt( dot(uRotationSinCos, uRotationSinCos));//BEST TRICK EVER?
	
	vec3 vertpos = (aVertexPosition*(1. - uAnimInterp) + aVertexPositionNext*uAnimInterp);
	vertpos = vec3( vertpos.x * uRotationSinCos.y - vertpos.y * uRotationSinCos.x, vertpos.x * uRotationSinCos.x + vertpos.y * uRotationSinCos.y , vertpos.z * scale );
	vec4 mPos =  vec4(uModelPos + vertpos,1.);
	gl_Position = uVPMatrix * mPos;
	
	vec3 interpNorm = (aVertexNormal*(1. - uAnimInterp) + aVertexNormalNext*uAnimInterp);
	vec3 vertNorm = vec3( interpNorm.x * uRotationSinCos.y - interpNorm.y * uRotationSinCos.x, interpNorm.x * uRotationSinCos.x + interpNorm.y * uRotationSinCos.y , interpNorm.z );
	
	vec3 transformedNormal = normalize(uNMatrix * vertNorm);

	vDiffuse = max(dot(transformedNormal, (uLightPos)), 0.0) *uLightColor;
	vNorm = vertNorm;
	vTransformedNorm = transformedNormal;
	MACRO_VFILL
	
	texCoord = aVertexTexCoord;
	vModelPos = mPos.xyz;
	vScreenPos = uVPMatrix * mPos;
	vec4 shadowClipPos = uShadowMVPMatrix * mPos;
	vShadowPos =  vec3( shadowClipPos.xyz / shadowClipPos.w)*0.5+0.5;
}