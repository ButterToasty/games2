precision mediump float;

attribute vec3 aVertexPosition;
attribute highp vec3 aVertexNormal;
attribute vec2 aVertexTexCoord;

uniform mat4 uVPMatrix;
uniform mat4 uShadowMVPMatrix;
uniform mat3 uNMatrix;

uniform float uTexVariation;

uniform vec3 uModelPos;
uniform vec2 uRotationSinCos;
uniform mat4 uCDMatrix; //cliffDeformMatrix

uniform highp vec3 uLightPos;
uniform mediump vec3 uLightColor;

uniform highp vec3 uFillPos;
uniform highp vec3 uFillColor;

varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;
varying vec3 vShadowPos;


void main(void) {
	float scale = sqrt( dot(uRotationSinCos, uRotationSinCos));//BEST TRICK EVER?
	vec3 vertpos = aVertexPosition;
	vertpos = vec3( vertpos.x * uRotationSinCos.y - vertpos.y * uRotationSinCos.x, vertpos.x * uRotationSinCos.x + vertpos.y * uRotationSinCos.y , vertpos.z );
	vertpos.xy /= scale ; vertpos.z *= scale;
	vertpos = vertpos + vec3(0.5,0.5,0.);
	vec4 interpFactors = vec4((1.-vertpos.x)*(1.-vertpos.y),(1.-vertpos.x)*(vertpos.y), (vertpos.x)*(1.-vertpos.y), (vertpos.x)*(vertpos.y));
	float deformZ = dot(uCDMatrix[3], interpFactors);
	vec3 interpNorm = vec3( dot(uCDMatrix[0], interpFactors), dot(uCDMatrix[1], interpFactors),   dot(uCDMatrix[2], interpFactors));
	
	vec4 mPos =  vec4(uModelPos + vertpos + vec3(0., 0., deformZ),1.);
	gl_Position = uVPMatrix * mPos;
	
	vec4 shadowClipPos = uShadowMVPMatrix * mPos;
	vShadowPos = shadowClipPos.xyz/shadowClipPos.w * 0.5 + 0.5;
	
	vec3 tNorm = aVertexNormal;
	tNorm = vec3( tNorm.x * uRotationSinCos.y - tNorm.y * uRotationSinCos.x, tNorm.x * uRotationSinCos.x + tNorm.y * uRotationSinCos.y , tNorm.z );
	
	//GIANT HACK
	tNorm = normalize (mix(tNorm , interpNorm, tNorm.z));
	
	vec3 transformedNormal = tNorm;
	MACRO_VFILL
	vDiffuse =  max(dot(tNorm, (uLightPos)), 0.0) *uLightColor;

	vModelPos = mPos.xyz;
	texCoord = vec2(aVertexTexCoord.x*0.25-0.125 + uTexVariation*0.25, aVertexTexCoord.y);
}