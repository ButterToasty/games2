attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aVertexTexCoord;
attribute vec3 aVertexPositionNext;
attribute vec3 aVertexNormalNext;

uniform mat4 uVPMatrix;
uniform mat4 uVMatrix;
uniform mat3 uNMatrix;

uniform mediump vec3 uLightPos;
uniform mediump vec3 uLightColor;
uniform vec3 uFillPos;
uniform mediump vec3 uFillColor;

uniform vec3 uRSin;
uniform vec3 uRCos;

uniform vec3 uModelPos;

varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;
varying vec3 vNorm;
varying vec3 vTransformedNorm;

uniform mat4 uShadowMVPMatrix;
varying vec3 vShadowPos;

void main(void) {
	//BEST TRICK EVER pt2
	vec3 unpackData = sqrt(uRSin*uRSin + uRCos*uRCos); //x==scale, y==animInterp+1, z==z_scale
	vec3 rSin = uRSin/unpackData;
	vec3 rCos = uRCos/unpackData;
	
	float animInterp = unpackData.y - 1.; 
	
	vec3 vertpos = (aVertexPosition*(1. - animInterp) + aVertexPositionNext*animInterp);
	vertpos.z *= unpackData.z;

	//Rotation order is Z Y X (yaw - pitch - roll)
	/*vec3 row1 = vec3(rCos.z * rCos.y, -rSin.z*rCos.x + rCos.z*rSin.y*rSin.x, rSin.z*rSin.x + rCos.z*rSin.y*rCos.x);
	vec3 row2 = vec3(rCos.y*rSin.z, rCos.z*rCos.x + rSin.z*rSin.y*rSin.x, -rCos.z*rSin.x + rSin.z*rSin.y*rCos.x);
	vec3 row3 = vec3(-rSin.y, rSin.x*rCos.y, rCos.y*rCos.x);*/
	
	//Rotation order is X Y Z
	vec3 row1 = vec3(rCos.y*rCos.z, -rCos.y*rSin.z,rSin.y);
	vec3 row2 = vec3( rSin.x*rSin.y*rCos.z + rCos.x*rSin.z, -rSin.x*rSin.y*rSin.z + rCos.x*rCos.z, -rSin.x*rCos.y);
	vec3 row3 = vec3(-rCos.x*rSin.y*rCos.z + rSin.x*rSin.z, rCos.x*rSin.y*rSin.z + rSin.x*rCos.z , rCos.x*rCos.y);
	
	vertpos = vec3( dot(row1, vertpos), dot(row2,vertpos), dot(row3,vertpos));
	vertpos *= unpackData.x;
	vec4 mPos =  vec4(uModelPos + vertpos,1.);
	gl_Position = uVPMatrix * mPos;
	
	vec3 interpNorm = (aVertexNormal*(1. - animInterp) + aVertexNormalNext*animInterp) * vec3(1.,1.,1.);
	vec3 vertNorm = vec3( dot(row1, interpNorm ), dot(row2,interpNorm ), dot(row3,interpNorm ));
	vec3 transformedNormal = normalize(uNMatrix * vertNorm);
	
	vDiffuse = max(dot(transformedNormal, (uLightPos)), 0.0) *uLightColor;
	vNorm = vertNorm;
	vTransformedNorm = transformedNormal;
	MACRO_VFILL
	
	texCoord = aVertexTexCoord;
	vModelPos = mPos.xyz;
	
	vec4 shadowClipPos = uShadowMVPMatrix * mPos;
	vShadowPos =  vec3( shadowClipPos.xyz / shadowClipPos.w)*0.5+0.5;
}