attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aVertexTexCoord;
attribute vec3 aVertexColor;

uniform mat4 uVPMatrix;
uniform mat3 uNMatrix;

uniform mediump vec3 uLightPos;
uniform mediump vec3 uLightColor;
uniform vec3 uFillPos;
uniform mediump vec3 uFillColor;
uniform mediump float uTime;
uniform float uZOffset;
uniform vec2 uTexScale;
uniform vec2 uTexOffset;

uniform vec3 uRSin;
uniform vec3 uRCos;

uniform vec3 uModelPos;

varying vec3 vDiffuse;
varying vec3 vFill;
varying vec2 texCoord;
varying vec3 vModelPos;
varying vec3 vVertColor;

varying vec4 vScreenPos;

uniform mat4 uShadowMVPMatrix;
varying vec3 vShadowPos;

void main(void) {
	vec3 unpackData = sqrt(uRSin*uRSin + uRCos*uRCos); //x==scale, y==animInterp+1, z==z_scale
	vec3 rSin = uRSin/unpackData;
	vec3 rCos = uRCos/unpackData;

	//Rotation order is X Y Z
	vec3 row1 = vec3(rCos.y*rCos.z, -rCos.y*rSin.z,rSin.y);
	vec3 row2 = vec3( rSin.x*rSin.y*rCos.z + rCos.x*rSin.z, -rSin.x*rSin.y*rSin.z + rCos.x*rCos.z, -rSin.x*rCos.y);
	vec3 row3 = vec3(-rCos.x*rSin.y*rCos.z + rSin.x*rSin.z, rCos.x*rSin.y*rSin.z + rSin.x*rCos.z , rCos.x*rCos.y);
	
	vec3 vertpos = aVertexPosition;
	float doorBias = aVertexColor.z ;
	vertpos.z += uZOffset * doorBias;
	vertpos = vec3( dot(row1, vertpos), dot(row2,vertpos), dot(row3,vertpos));
	vertpos *= unpackData.x;
	vec4 mPos =  vec4(uModelPos + vertpos,1.);
	
	gl_Position = uVPMatrix * mPos;
	
	vec3 vertNorm = vec3( dot(row1, aVertexNormal ), dot(row2, aVertexNormal ), dot(row3,aVertexNormal ));
	vec3 transformedNormal = normalize(uNMatrix * vertNorm);

	vDiffuse = max(dot(transformedNormal, (uLightPos)), 0.0) *uLightColor;
	vFill = aVertexColor;
	vFill.r += 24.*( abs(vertNorm.x)-0.5 ); //fake contrast
	vFill.r += uFillColor.r; //muzzle flash
	
	vec2 norm2d = normalize(aVertexNormal.xy); 
	texCoord = (aVertexTexCoord+ uTexOffset)*uTexScale;
	
	vModelPos = mPos.xyz;
	vScreenPos = uVPMatrix * mPos;
	vec4 shadowClipPos = uShadowMVPMatrix * mPos;
	vShadowPos =  vec3( shadowClipPos.xyz / shadowClipPos.w)*0.5+0.5;
}