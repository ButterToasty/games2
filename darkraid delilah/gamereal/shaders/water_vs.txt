attribute vec3 aVertexPosition;

uniform mat4 uVPMatrix;
uniform mat4 uVMatrix;
uniform mat3 uNMatrix;
uniform mat4 uShadowMVPMatrix;

uniform vec3 uWorldPos;
uniform vec3 uModelPos;
uniform float uAnimInterp;
uniform mediump vec3 uWaterOffset;
uniform mediump vec3 uLightPos;

varying vec3 vModelPos;
varying vec3 vShadowPos;

varying vec3 vNorm;
varying vec3 vEyeDir;
varying vec3 vWaterPos;
varying vec4 vScreenPos;



void Gerstner(vec2 waveDir, float amplitude, float sharpness, float phaseSpeed, inout vec4 mPos){
	sharpness /= amplitude;
	float phase =  dot(waveDir, vWaterPos.xy) + uWaterOffset.z*phaseSpeed;
	float cosphase = cos(phase);
	float sinphase = sin(phase);

	mPos.x += amplitude*sharpness*waveDir.x*cosphase;
	mPos.y += amplitude*sharpness*waveDir.y*cosphase;
	mPos.z += amplitude*sinphase;
	vNorm.x += - waveDir.x * amplitude * cosphase;
	vNorm.y += - waveDir.y * amplitude * cosphase;
	vNorm.z += - sharpness*amplitude*sinphase;
}

void main(void) {
	vec3 vertpos = aVertexPosition;
	vec4 mPos =  vec4(uModelPos + vertpos,1.);
	vNorm = vec3(0.,0.,1.);
	vWaterPos = mPos.xyz + uWorldPos;

	Gerstner(vec2(-0.2,-0.4), 0.1, 0.6, 3.9, mPos);
	Gerstner(vec2(-0.6,0.5), 0.05, 0.3, 2.3, mPos);
	Gerstner(vec2(0.52,-0.2), 0.03, 0.5, 2.7, mPos);

	vScreenPos = uVPMatrix * mPos;
	gl_Position = vScreenPos;
	
	//vNorm.rg *= 1.;
	vNorm.z = max(vNorm.z , 0.1);
	vNorm = normalize(vNorm);

	vEyeDir = -normalize((uVMatrix * mPos).xyz);
	
	vModelPos = mPos.xyz;
	
	vec4 shadowClipPos = uShadowMVPMatrix * mPos;
	vShadowPos =  vec3( shadowClipPos.xyz / shadowClipPos.w)*0.5+0.5;
}